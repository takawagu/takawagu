Assignment name  : sort_list
Expected files   : sort_list.c
Allowed functions:
--------------------------------------------------------------------------------

Write the following functions:

t_list	*sort_list(t_list* lst, int (*cmp)(int, int));

This function must sort the list given as a parameter, using the function
pointer cmp to select the order to apply, and returns a pointer to the
first element of the sorted list.

Duplications must remain.

Inputs will always be consistent.

You must use the type t_list described in the file list.h
that is provided to you. You must include that file
(#include "list.h"), but you must not turn it in. We will use our own
to compile your assignment.

Functions passed as cmp will always return a value different from
0 if a and b are in the right order, 0 otherwise.

For example, the following function used as cmp will sort the list
in ascending order:

int ascending(int a, int b)
{
	return (a <= b);
}


課題名: sort_list
想定ファイル: sort_list.c
使用可能な関数:
--------------------------------------------------------------------------------

以下の関数を記述してください。

t_list *sort_list(t_list* lst, int (*cmp)(int, int));

この関数は、引数として与えられたリストを、関数ポインタ cmp を使用して適用する順序を選択し、ソートしたリストの最初の要素へのポインタを返します。

重複は残さなければなりません。

入力は常に一貫性を保ちます。

提供されたファイル list.h に記述されている t_list 型を使用してください。このファイルをインクルードする必要があります(#include "list.h")が、提出はしないでください。課題のコンパイルには、独自のファイルを使用します。

cmp として渡される関数は、常に次の値以外の値を返します。

a と b が正しい順序である場合は 0、そうでない場合は 0。

例えば、次の関数を cmp として使用すると、リストが昇順でソートされます。

int ascending(int a, int b)
{
return (a <= b);
}